// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/template/template_role_permission_policy_service.proto

package prototemplate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemplateRolePermissionPolicyService_List_FullMethodName         = "/account.aggregates.template.TemplateRolePermissionPolicyService/List"
	TemplateRolePermissionPolicyService_Create_FullMethodName       = "/account.aggregates.template.TemplateRolePermissionPolicyService/Create"
	TemplateRolePermissionPolicyService_Delete_FullMethodName       = "/account.aggregates.template.TemplateRolePermissionPolicyService/Delete"
	TemplateRolePermissionPolicyService_UpdateByRole_FullMethodName = "/account.aggregates.template.TemplateRolePermissionPolicyService/UpdateByRole"
)

// TemplateRolePermissionPolicyServiceClient is the client API for TemplateRolePermissionPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateRolePermissionPolicyServiceClient interface {
	List(ctx context.Context, in *TemplateRolePermissionPolicyListRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyListResponse, error)
	Create(ctx context.Context, in *TemplateRolePermissionPolicyCreateRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyCreateResponse, error)
	Delete(ctx context.Context, in *TemplateRolePermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyDeleteResponse, error)
	UpdateByRole(ctx context.Context, in *TemplateRolePermissionPolicyUpdateByRoleRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyUpdateByRoleResponse, error)
}

type templateRolePermissionPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateRolePermissionPolicyServiceClient(cc grpc.ClientConnInterface) TemplateRolePermissionPolicyServiceClient {
	return &templateRolePermissionPolicyServiceClient{cc}
}

func (c *templateRolePermissionPolicyServiceClient) List(ctx context.Context, in *TemplateRolePermissionPolicyListRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyListResponse, error) {
	out := new(TemplateRolePermissionPolicyListResponse)
	err := c.cc.Invoke(ctx, TemplateRolePermissionPolicyService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateRolePermissionPolicyServiceClient) Create(ctx context.Context, in *TemplateRolePermissionPolicyCreateRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyCreateResponse, error) {
	out := new(TemplateRolePermissionPolicyCreateResponse)
	err := c.cc.Invoke(ctx, TemplateRolePermissionPolicyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateRolePermissionPolicyServiceClient) Delete(ctx context.Context, in *TemplateRolePermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyDeleteResponse, error) {
	out := new(TemplateRolePermissionPolicyDeleteResponse)
	err := c.cc.Invoke(ctx, TemplateRolePermissionPolicyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateRolePermissionPolicyServiceClient) UpdateByRole(ctx context.Context, in *TemplateRolePermissionPolicyUpdateByRoleRequest, opts ...grpc.CallOption) (*TemplateRolePermissionPolicyUpdateByRoleResponse, error) {
	out := new(TemplateRolePermissionPolicyUpdateByRoleResponse)
	err := c.cc.Invoke(ctx, TemplateRolePermissionPolicyService_UpdateByRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateRolePermissionPolicyServiceServer is the server API for TemplateRolePermissionPolicyService service.
// All implementations must embed UnimplementedTemplateRolePermissionPolicyServiceServer
// for forward compatibility
type TemplateRolePermissionPolicyServiceServer interface {
	List(context.Context, *TemplateRolePermissionPolicyListRequest) (*TemplateRolePermissionPolicyListResponse, error)
	Create(context.Context, *TemplateRolePermissionPolicyCreateRequest) (*TemplateRolePermissionPolicyCreateResponse, error)
	Delete(context.Context, *TemplateRolePermissionPolicyDeleteRequest) (*TemplateRolePermissionPolicyDeleteResponse, error)
	UpdateByRole(context.Context, *TemplateRolePermissionPolicyUpdateByRoleRequest) (*TemplateRolePermissionPolicyUpdateByRoleResponse, error)
	mustEmbedUnimplementedTemplateRolePermissionPolicyServiceServer()
}

// UnimplementedTemplateRolePermissionPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateRolePermissionPolicyServiceServer struct {
}

func (UnimplementedTemplateRolePermissionPolicyServiceServer) List(context.Context, *TemplateRolePermissionPolicyListRequest) (*TemplateRolePermissionPolicyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTemplateRolePermissionPolicyServiceServer) Create(context.Context, *TemplateRolePermissionPolicyCreateRequest) (*TemplateRolePermissionPolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTemplateRolePermissionPolicyServiceServer) Delete(context.Context, *TemplateRolePermissionPolicyDeleteRequest) (*TemplateRolePermissionPolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTemplateRolePermissionPolicyServiceServer) UpdateByRole(context.Context, *TemplateRolePermissionPolicyUpdateByRoleRequest) (*TemplateRolePermissionPolicyUpdateByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateByRole not implemented")
}
func (UnimplementedTemplateRolePermissionPolicyServiceServer) mustEmbedUnimplementedTemplateRolePermissionPolicyServiceServer() {
}

// UnsafeTemplateRolePermissionPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateRolePermissionPolicyServiceServer will
// result in compilation errors.
type UnsafeTemplateRolePermissionPolicyServiceServer interface {
	mustEmbedUnimplementedTemplateRolePermissionPolicyServiceServer()
}

func RegisterTemplateRolePermissionPolicyServiceServer(s grpc.ServiceRegistrar, srv TemplateRolePermissionPolicyServiceServer) {
	s.RegisterService(&TemplateRolePermissionPolicyService_ServiceDesc, srv)
}

func _TemplateRolePermissionPolicyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRolePermissionPolicyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateRolePermissionPolicyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateRolePermissionPolicyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateRolePermissionPolicyServiceServer).List(ctx, req.(*TemplateRolePermissionPolicyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateRolePermissionPolicyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRolePermissionPolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateRolePermissionPolicyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateRolePermissionPolicyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateRolePermissionPolicyServiceServer).Create(ctx, req.(*TemplateRolePermissionPolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateRolePermissionPolicyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRolePermissionPolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateRolePermissionPolicyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateRolePermissionPolicyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateRolePermissionPolicyServiceServer).Delete(ctx, req.(*TemplateRolePermissionPolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateRolePermissionPolicyService_UpdateByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateRolePermissionPolicyUpdateByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateRolePermissionPolicyServiceServer).UpdateByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateRolePermissionPolicyService_UpdateByRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateRolePermissionPolicyServiceServer).UpdateByRole(ctx, req.(*TemplateRolePermissionPolicyUpdateByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateRolePermissionPolicyService_ServiceDesc is the grpc.ServiceDesc for TemplateRolePermissionPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateRolePermissionPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.template.TemplateRolePermissionPolicyService",
	HandlerType: (*TemplateRolePermissionPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TemplateRolePermissionPolicyService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TemplateRolePermissionPolicyService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TemplateRolePermissionPolicyService_Delete_Handler,
		},
		{
			MethodName: "UpdateByRole",
			Handler:    _TemplateRolePermissionPolicyService_UpdateByRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/template/template_role_permission_policy_service.proto",
}
