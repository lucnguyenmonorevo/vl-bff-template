// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/template_organizational_role_permission_policy_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TemplateOrganizationalRolePermissionPolicyService_List_FullMethodName   = "/account.aggregates.permission.TemplateOrganizationalRolePermissionPolicyService/List"
	TemplateOrganizationalRolePermissionPolicyService_Get_FullMethodName    = "/account.aggregates.permission.TemplateOrganizationalRolePermissionPolicyService/Get"
	TemplateOrganizationalRolePermissionPolicyService_Delete_FullMethodName = "/account.aggregates.permission.TemplateOrganizationalRolePermissionPolicyService/Delete"
	TemplateOrganizationalRolePermissionPolicyService_Create_FullMethodName = "/account.aggregates.permission.TemplateOrganizationalRolePermissionPolicyService/Create"
	TemplateOrganizationalRolePermissionPolicyService_Update_FullMethodName = "/account.aggregates.permission.TemplateOrganizationalRolePermissionPolicyService/Update"
)

// TemplateOrganizationalRolePermissionPolicyServiceClient is the client API for TemplateOrganizationalRolePermissionPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateOrganizationalRolePermissionPolicyServiceClient interface {
	List(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyListRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyListResponse, error)
	Get(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyGetRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyGetResponse, error)
	Delete(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyDeleteResponse, error)
	Create(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyCreateRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyCreateResponse, error)
	Update(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyUpdateRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyUpdateResponse, error)
}

type templateOrganizationalRolePermissionPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateOrganizationalRolePermissionPolicyServiceClient(cc grpc.ClientConnInterface) TemplateOrganizationalRolePermissionPolicyServiceClient {
	return &templateOrganizationalRolePermissionPolicyServiceClient{cc}
}

func (c *templateOrganizationalRolePermissionPolicyServiceClient) List(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyListRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyListResponse, error) {
	out := new(grpc1.TemplateOrganizationalRolePermissionPolicyListResponse)
	err := c.cc.Invoke(ctx, TemplateOrganizationalRolePermissionPolicyService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateOrganizationalRolePermissionPolicyServiceClient) Get(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyGetRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyGetResponse, error) {
	out := new(grpc1.TemplateOrganizationalRolePermissionPolicyGetResponse)
	err := c.cc.Invoke(ctx, TemplateOrganizationalRolePermissionPolicyService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateOrganizationalRolePermissionPolicyServiceClient) Delete(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyDeleteResponse, error) {
	out := new(grpc1.TemplateOrganizationalRolePermissionPolicyDeleteResponse)
	err := c.cc.Invoke(ctx, TemplateOrganizationalRolePermissionPolicyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateOrganizationalRolePermissionPolicyServiceClient) Create(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyCreateRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyCreateResponse, error) {
	out := new(grpc1.TemplateOrganizationalRolePermissionPolicyCreateResponse)
	err := c.cc.Invoke(ctx, TemplateOrganizationalRolePermissionPolicyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateOrganizationalRolePermissionPolicyServiceClient) Update(ctx context.Context, in *grpc1.TemplateOrganizationalRolePermissionPolicyUpdateRequest, opts ...grpc.CallOption) (*grpc1.TemplateOrganizationalRolePermissionPolicyUpdateResponse, error) {
	out := new(grpc1.TemplateOrganizationalRolePermissionPolicyUpdateResponse)
	err := c.cc.Invoke(ctx, TemplateOrganizationalRolePermissionPolicyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateOrganizationalRolePermissionPolicyServiceServer is the server API for TemplateOrganizationalRolePermissionPolicyService service.
// All implementations must embed UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer
// for forward compatibility
type TemplateOrganizationalRolePermissionPolicyServiceServer interface {
	List(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyListRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyListResponse, error)
	Get(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyGetRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyGetResponse, error)
	Delete(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyDeleteRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyDeleteResponse, error)
	Create(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyCreateRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyCreateResponse, error)
	Update(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyUpdateRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyUpdateResponse, error)
	mustEmbedUnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer()
}

// UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer struct {
}

func (UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer) List(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyListRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer) Get(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyGetRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer) Delete(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyDeleteRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer) Create(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyCreateRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer) Update(context.Context, *grpc1.TemplateOrganizationalRolePermissionPolicyUpdateRequest) (*grpc1.TemplateOrganizationalRolePermissionPolicyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer) mustEmbedUnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer() {
}

// UnsafeTemplateOrganizationalRolePermissionPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateOrganizationalRolePermissionPolicyServiceServer will
// result in compilation errors.
type UnsafeTemplateOrganizationalRolePermissionPolicyServiceServer interface {
	mustEmbedUnimplementedTemplateOrganizationalRolePermissionPolicyServiceServer()
}

func RegisterTemplateOrganizationalRolePermissionPolicyServiceServer(s grpc.ServiceRegistrar, srv TemplateOrganizationalRolePermissionPolicyServiceServer) {
	s.RegisterService(&TemplateOrganizationalRolePermissionPolicyService_ServiceDesc, srv)
}

func _TemplateOrganizationalRolePermissionPolicyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.TemplateOrganizationalRolePermissionPolicyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateOrganizationalRolePermissionPolicyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).List(ctx, req.(*grpc1.TemplateOrganizationalRolePermissionPolicyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateOrganizationalRolePermissionPolicyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.TemplateOrganizationalRolePermissionPolicyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateOrganizationalRolePermissionPolicyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Get(ctx, req.(*grpc1.TemplateOrganizationalRolePermissionPolicyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateOrganizationalRolePermissionPolicyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.TemplateOrganizationalRolePermissionPolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateOrganizationalRolePermissionPolicyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Delete(ctx, req.(*grpc1.TemplateOrganizationalRolePermissionPolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateOrganizationalRolePermissionPolicyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.TemplateOrganizationalRolePermissionPolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateOrganizationalRolePermissionPolicyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Create(ctx, req.(*grpc1.TemplateOrganizationalRolePermissionPolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateOrganizationalRolePermissionPolicyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.TemplateOrganizationalRolePermissionPolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TemplateOrganizationalRolePermissionPolicyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateOrganizationalRolePermissionPolicyServiceServer).Update(ctx, req.(*grpc1.TemplateOrganizationalRolePermissionPolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateOrganizationalRolePermissionPolicyService_ServiceDesc is the grpc.ServiceDesc for TemplateOrganizationalRolePermissionPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateOrganizationalRolePermissionPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.TemplateOrganizationalRolePermissionPolicyService",
	HandlerType: (*TemplateOrganizationalRolePermissionPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TemplateOrganizationalRolePermissionPolicyService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _TemplateOrganizationalRolePermissionPolicyService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TemplateOrganizationalRolePermissionPolicyService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TemplateOrganizationalRolePermissionPolicyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TemplateOrganizationalRolePermissionPolicyService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/template_organizational_role_permission_policy_service.proto",
}
