// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/permission_role_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermissionRoleService_Get_FullMethodName    = "/account.aggregates.permission.PermissionRoleService/Get"
	PermissionRoleService_List_FullMethodName   = "/account.aggregates.permission.PermissionRoleService/List"
	PermissionRoleService_Create_FullMethodName = "/account.aggregates.permission.PermissionRoleService/Create"
	PermissionRoleService_Update_FullMethodName = "/account.aggregates.permission.PermissionRoleService/Update"
	PermissionRoleService_Delete_FullMethodName = "/account.aggregates.permission.PermissionRoleService/Delete"
)

// PermissionRoleServiceClient is the client API for PermissionRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionRoleServiceClient interface {
	Get(ctx context.Context, in *grpc1.PermissionRoleGetRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleGetResponse, error)
	List(ctx context.Context, in *grpc1.PermissionRoleListRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleListResponse, error)
	Create(ctx context.Context, in *grpc1.PermissionRoleCreateRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleCreateResponse, error)
	Update(ctx context.Context, in *grpc1.PermissionRoleUpdateRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleUpdateResponse, error)
	Delete(ctx context.Context, in *grpc1.PermissionRoleDeleteRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleDeleteResponse, error)
}

type permissionRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionRoleServiceClient(cc grpc.ClientConnInterface) PermissionRoleServiceClient {
	return &permissionRoleServiceClient{cc}
}

func (c *permissionRoleServiceClient) Get(ctx context.Context, in *grpc1.PermissionRoleGetRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleGetResponse, error) {
	out := new(grpc1.PermissionRoleGetResponse)
	err := c.cc.Invoke(ctx, PermissionRoleService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRoleServiceClient) List(ctx context.Context, in *grpc1.PermissionRoleListRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleListResponse, error) {
	out := new(grpc1.PermissionRoleListResponse)
	err := c.cc.Invoke(ctx, PermissionRoleService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRoleServiceClient) Create(ctx context.Context, in *grpc1.PermissionRoleCreateRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleCreateResponse, error) {
	out := new(grpc1.PermissionRoleCreateResponse)
	err := c.cc.Invoke(ctx, PermissionRoleService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRoleServiceClient) Update(ctx context.Context, in *grpc1.PermissionRoleUpdateRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleUpdateResponse, error) {
	out := new(grpc1.PermissionRoleUpdateResponse)
	err := c.cc.Invoke(ctx, PermissionRoleService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionRoleServiceClient) Delete(ctx context.Context, in *grpc1.PermissionRoleDeleteRequest, opts ...grpc.CallOption) (*grpc1.PermissionRoleDeleteResponse, error) {
	out := new(grpc1.PermissionRoleDeleteResponse)
	err := c.cc.Invoke(ctx, PermissionRoleService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionRoleServiceServer is the server API for PermissionRoleService service.
// All implementations must embed UnimplementedPermissionRoleServiceServer
// for forward compatibility
type PermissionRoleServiceServer interface {
	Get(context.Context, *grpc1.PermissionRoleGetRequest) (*grpc1.PermissionRoleGetResponse, error)
	List(context.Context, *grpc1.PermissionRoleListRequest) (*grpc1.PermissionRoleListResponse, error)
	Create(context.Context, *grpc1.PermissionRoleCreateRequest) (*grpc1.PermissionRoleCreateResponse, error)
	Update(context.Context, *grpc1.PermissionRoleUpdateRequest) (*grpc1.PermissionRoleUpdateResponse, error)
	Delete(context.Context, *grpc1.PermissionRoleDeleteRequest) (*grpc1.PermissionRoleDeleteResponse, error)
	mustEmbedUnimplementedPermissionRoleServiceServer()
}

// UnimplementedPermissionRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionRoleServiceServer struct {
}

func (UnimplementedPermissionRoleServiceServer) Get(context.Context, *grpc1.PermissionRoleGetRequest) (*grpc1.PermissionRoleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPermissionRoleServiceServer) List(context.Context, *grpc1.PermissionRoleListRequest) (*grpc1.PermissionRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPermissionRoleServiceServer) Create(context.Context, *grpc1.PermissionRoleCreateRequest) (*grpc1.PermissionRoleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPermissionRoleServiceServer) Update(context.Context, *grpc1.PermissionRoleUpdateRequest) (*grpc1.PermissionRoleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPermissionRoleServiceServer) Delete(context.Context, *grpc1.PermissionRoleDeleteRequest) (*grpc1.PermissionRoleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPermissionRoleServiceServer) mustEmbedUnimplementedPermissionRoleServiceServer() {}

// UnsafePermissionRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionRoleServiceServer will
// result in compilation errors.
type UnsafePermissionRoleServiceServer interface {
	mustEmbedUnimplementedPermissionRoleServiceServer()
}

func RegisterPermissionRoleServiceServer(s grpc.ServiceRegistrar, srv PermissionRoleServiceServer) {
	s.RegisterService(&PermissionRoleService_ServiceDesc, srv)
}

func _PermissionRoleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionRoleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRoleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRoleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRoleServiceServer).Get(ctx, req.(*grpc1.PermissionRoleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRoleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRoleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRoleService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRoleServiceServer).List(ctx, req.(*grpc1.PermissionRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionRoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRoleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRoleServiceServer).Create(ctx, req.(*grpc1.PermissionRoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRoleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionRoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRoleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRoleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRoleServiceServer).Update(ctx, req.(*grpc1.PermissionRoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionRoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionRoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionRoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionRoleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionRoleServiceServer).Delete(ctx, req.(*grpc1.PermissionRoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionRoleService_ServiceDesc is the grpc.ServiceDesc for PermissionRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.PermissionRoleService",
	HandlerType: (*PermissionRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PermissionRoleService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermissionRoleService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PermissionRoleService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PermissionRoleService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PermissionRoleService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/permission_role_service.proto",
}
