// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/permission_user_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PermissionUserService_Get_FullMethodName    = "/account.aggregates.permission.PermissionUserService/Get"
	PermissionUserService_List_FullMethodName   = "/account.aggregates.permission.PermissionUserService/List"
	PermissionUserService_Create_FullMethodName = "/account.aggregates.permission.PermissionUserService/Create"
	PermissionUserService_Update_FullMethodName = "/account.aggregates.permission.PermissionUserService/Update"
	PermissionUserService_Delete_FullMethodName = "/account.aggregates.permission.PermissionUserService/Delete"
)

// PermissionUserServiceClient is the client API for PermissionUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PermissionUserServiceClient interface {
	Get(ctx context.Context, in *grpc1.PermissionUserGetRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserGetResponse, error)
	List(ctx context.Context, in *grpc1.PermissionUserListRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserListResponse, error)
	Create(ctx context.Context, in *grpc1.PermissionUserCreateRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserCreateResponse, error)
	Update(ctx context.Context, in *grpc1.PermissionUserUpdateRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserUpdateResponse, error)
	Delete(ctx context.Context, in *grpc1.PermissionUserDeleteRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserDeleteResponse, error)
}

type permissionUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionUserServiceClient(cc grpc.ClientConnInterface) PermissionUserServiceClient {
	return &permissionUserServiceClient{cc}
}

func (c *permissionUserServiceClient) Get(ctx context.Context, in *grpc1.PermissionUserGetRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserGetResponse, error) {
	out := new(grpc1.PermissionUserGetResponse)
	err := c.cc.Invoke(ctx, PermissionUserService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionUserServiceClient) List(ctx context.Context, in *grpc1.PermissionUserListRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserListResponse, error) {
	out := new(grpc1.PermissionUserListResponse)
	err := c.cc.Invoke(ctx, PermissionUserService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionUserServiceClient) Create(ctx context.Context, in *grpc1.PermissionUserCreateRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserCreateResponse, error) {
	out := new(grpc1.PermissionUserCreateResponse)
	err := c.cc.Invoke(ctx, PermissionUserService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionUserServiceClient) Update(ctx context.Context, in *grpc1.PermissionUserUpdateRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserUpdateResponse, error) {
	out := new(grpc1.PermissionUserUpdateResponse)
	err := c.cc.Invoke(ctx, PermissionUserService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionUserServiceClient) Delete(ctx context.Context, in *grpc1.PermissionUserDeleteRequest, opts ...grpc.CallOption) (*grpc1.PermissionUserDeleteResponse, error) {
	out := new(grpc1.PermissionUserDeleteResponse)
	err := c.cc.Invoke(ctx, PermissionUserService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionUserServiceServer is the server API for PermissionUserService service.
// All implementations must embed UnimplementedPermissionUserServiceServer
// for forward compatibility
type PermissionUserServiceServer interface {
	Get(context.Context, *grpc1.PermissionUserGetRequest) (*grpc1.PermissionUserGetResponse, error)
	List(context.Context, *grpc1.PermissionUserListRequest) (*grpc1.PermissionUserListResponse, error)
	Create(context.Context, *grpc1.PermissionUserCreateRequest) (*grpc1.PermissionUserCreateResponse, error)
	Update(context.Context, *grpc1.PermissionUserUpdateRequest) (*grpc1.PermissionUserUpdateResponse, error)
	Delete(context.Context, *grpc1.PermissionUserDeleteRequest) (*grpc1.PermissionUserDeleteResponse, error)
	mustEmbedUnimplementedPermissionUserServiceServer()
}

// UnimplementedPermissionUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPermissionUserServiceServer struct {
}

func (UnimplementedPermissionUserServiceServer) Get(context.Context, *grpc1.PermissionUserGetRequest) (*grpc1.PermissionUserGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPermissionUserServiceServer) List(context.Context, *grpc1.PermissionUserListRequest) (*grpc1.PermissionUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPermissionUserServiceServer) Create(context.Context, *grpc1.PermissionUserCreateRequest) (*grpc1.PermissionUserCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPermissionUserServiceServer) Update(context.Context, *grpc1.PermissionUserUpdateRequest) (*grpc1.PermissionUserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPermissionUserServiceServer) Delete(context.Context, *grpc1.PermissionUserDeleteRequest) (*grpc1.PermissionUserDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPermissionUserServiceServer) mustEmbedUnimplementedPermissionUserServiceServer() {}

// UnsafePermissionUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionUserServiceServer will
// result in compilation errors.
type UnsafePermissionUserServiceServer interface {
	mustEmbedUnimplementedPermissionUserServiceServer()
}

func RegisterPermissionUserServiceServer(s grpc.ServiceRegistrar, srv PermissionUserServiceServer) {
	s.RegisterService(&PermissionUserService_ServiceDesc, srv)
}

func _PermissionUserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionUserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionUserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionUserService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionUserServiceServer).Get(ctx, req.(*grpc1.PermissionUserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionUserService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionUserServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionUserService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionUserServiceServer).List(ctx, req.(*grpc1.PermissionUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionUserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionUserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionUserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionUserService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionUserServiceServer).Create(ctx, req.(*grpc1.PermissionUserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionUserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionUserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionUserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionUserService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionUserServiceServer).Update(ctx, req.(*grpc1.PermissionUserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionUserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.PermissionUserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionUserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionUserService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionUserServiceServer).Delete(ctx, req.(*grpc1.PermissionUserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionUserService_ServiceDesc is the grpc.ServiceDesc for PermissionUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.PermissionUserService",
	HandlerType: (*PermissionUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _PermissionUserService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PermissionUserService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PermissionUserService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PermissionUserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PermissionUserService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/permission_user_service.proto",
}
