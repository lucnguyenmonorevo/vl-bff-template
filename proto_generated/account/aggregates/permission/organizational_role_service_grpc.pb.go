// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/organizational_role_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationalRoleService_List_FullMethodName   = "/account.aggregates.permission.OrganizationalRoleService/List"
	OrganizationalRoleService_Get_FullMethodName    = "/account.aggregates.permission.OrganizationalRoleService/Get"
	OrganizationalRoleService_Delete_FullMethodName = "/account.aggregates.permission.OrganizationalRoleService/Delete"
	OrganizationalRoleService_Create_FullMethodName = "/account.aggregates.permission.OrganizationalRoleService/Create"
	OrganizationalRoleService_Update_FullMethodName = "/account.aggregates.permission.OrganizationalRoleService/Update"
)

// OrganizationalRoleServiceClient is the client API for OrganizationalRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationalRoleServiceClient interface {
	List(ctx context.Context, in *grpc1.OrganizationalRoleListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleListResponse, error)
	Get(ctx context.Context, in *grpc1.OrganizationalRoleGetRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleGetResponse, error)
	Delete(ctx context.Context, in *grpc1.OrganizationalRoleDeleteRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleDeleteResponse, error)
	Create(ctx context.Context, in *grpc1.OrganizationalRoleCreateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleCreateResponse, error)
	Update(ctx context.Context, in *grpc1.OrganizationalRoleUpdateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleUpdateResponse, error)
}

type organizationalRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationalRoleServiceClient(cc grpc.ClientConnInterface) OrganizationalRoleServiceClient {
	return &organizationalRoleServiceClient{cc}
}

func (c *organizationalRoleServiceClient) List(ctx context.Context, in *grpc1.OrganizationalRoleListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleListResponse, error) {
	out := new(grpc1.OrganizationalRoleListResponse)
	err := c.cc.Invoke(ctx, OrganizationalRoleService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRoleServiceClient) Get(ctx context.Context, in *grpc1.OrganizationalRoleGetRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleGetResponse, error) {
	out := new(grpc1.OrganizationalRoleGetResponse)
	err := c.cc.Invoke(ctx, OrganizationalRoleService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRoleServiceClient) Delete(ctx context.Context, in *grpc1.OrganizationalRoleDeleteRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleDeleteResponse, error) {
	out := new(grpc1.OrganizationalRoleDeleteResponse)
	err := c.cc.Invoke(ctx, OrganizationalRoleService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRoleServiceClient) Create(ctx context.Context, in *grpc1.OrganizationalRoleCreateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleCreateResponse, error) {
	out := new(grpc1.OrganizationalRoleCreateResponse)
	err := c.cc.Invoke(ctx, OrganizationalRoleService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRoleServiceClient) Update(ctx context.Context, in *grpc1.OrganizationalRoleUpdateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRoleUpdateResponse, error) {
	out := new(grpc1.OrganizationalRoleUpdateResponse)
	err := c.cc.Invoke(ctx, OrganizationalRoleService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationalRoleServiceServer is the server API for OrganizationalRoleService service.
// All implementations must embed UnimplementedOrganizationalRoleServiceServer
// for forward compatibility
type OrganizationalRoleServiceServer interface {
	List(context.Context, *grpc1.OrganizationalRoleListRequest) (*grpc1.OrganizationalRoleListResponse, error)
	Get(context.Context, *grpc1.OrganizationalRoleGetRequest) (*grpc1.OrganizationalRoleGetResponse, error)
	Delete(context.Context, *grpc1.OrganizationalRoleDeleteRequest) (*grpc1.OrganizationalRoleDeleteResponse, error)
	Create(context.Context, *grpc1.OrganizationalRoleCreateRequest) (*grpc1.OrganizationalRoleCreateResponse, error)
	Update(context.Context, *grpc1.OrganizationalRoleUpdateRequest) (*grpc1.OrganizationalRoleUpdateResponse, error)
	mustEmbedUnimplementedOrganizationalRoleServiceServer()
}

// UnimplementedOrganizationalRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationalRoleServiceServer struct {
}

func (UnimplementedOrganizationalRoleServiceServer) List(context.Context, *grpc1.OrganizationalRoleListRequest) (*grpc1.OrganizationalRoleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrganizationalRoleServiceServer) Get(context.Context, *grpc1.OrganizationalRoleGetRequest) (*grpc1.OrganizationalRoleGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrganizationalRoleServiceServer) Delete(context.Context, *grpc1.OrganizationalRoleDeleteRequest) (*grpc1.OrganizationalRoleDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationalRoleServiceServer) Create(context.Context, *grpc1.OrganizationalRoleCreateRequest) (*grpc1.OrganizationalRoleCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationalRoleServiceServer) Update(context.Context, *grpc1.OrganizationalRoleUpdateRequest) (*grpc1.OrganizationalRoleUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationalRoleServiceServer) mustEmbedUnimplementedOrganizationalRoleServiceServer() {
}

// UnsafeOrganizationalRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationalRoleServiceServer will
// result in compilation errors.
type UnsafeOrganizationalRoleServiceServer interface {
	mustEmbedUnimplementedOrganizationalRoleServiceServer()
}

func RegisterOrganizationalRoleServiceServer(s grpc.ServiceRegistrar, srv OrganizationalRoleServiceServer) {
	s.RegisterService(&OrganizationalRoleService_ServiceDesc, srv)
}

func _OrganizationalRoleService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRoleServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRoleService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRoleServiceServer).List(ctx, req.(*grpc1.OrganizationalRoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRoleService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRoleGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRoleServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRoleService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRoleServiceServer).Get(ctx, req.(*grpc1.OrganizationalRoleGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRoleService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRoleDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRoleServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRoleService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRoleServiceServer).Delete(ctx, req.(*grpc1.OrganizationalRoleDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRoleService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRoleCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRoleServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRoleService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRoleServiceServer).Create(ctx, req.(*grpc1.OrganizationalRoleCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRoleService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRoleUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRoleServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRoleService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRoleServiceServer).Update(ctx, req.(*grpc1.OrganizationalRoleUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationalRoleService_ServiceDesc is the grpc.ServiceDesc for OrganizationalRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationalRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.OrganizationalRoleService",
	HandlerType: (*OrganizationalRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _OrganizationalRoleService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OrganizationalRoleService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrganizationalRoleService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OrganizationalRoleService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrganizationalRoleService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/organizational_role_service.proto",
}
