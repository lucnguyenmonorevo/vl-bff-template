// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/organizational_role_permission_policy_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationalRolePermissionPolicyService_List_FullMethodName   = "/account.aggregates.permission.OrganizationalRolePermissionPolicyService/List"
	OrganizationalRolePermissionPolicyService_Get_FullMethodName    = "/account.aggregates.permission.OrganizationalRolePermissionPolicyService/Get"
	OrganizationalRolePermissionPolicyService_Delete_FullMethodName = "/account.aggregates.permission.OrganizationalRolePermissionPolicyService/Delete"
	OrganizationalRolePermissionPolicyService_Create_FullMethodName = "/account.aggregates.permission.OrganizationalRolePermissionPolicyService/Create"
	OrganizationalRolePermissionPolicyService_Update_FullMethodName = "/account.aggregates.permission.OrganizationalRolePermissionPolicyService/Update"
)

// OrganizationalRolePermissionPolicyServiceClient is the client API for OrganizationalRolePermissionPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationalRolePermissionPolicyServiceClient interface {
	List(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyListResponse, error)
	Get(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyGetRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyGetResponse, error)
	Delete(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyDeleteResponse, error)
	Create(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyCreateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyCreateResponse, error)
	Update(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyUpdateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyUpdateResponse, error)
}

type organizationalRolePermissionPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationalRolePermissionPolicyServiceClient(cc grpc.ClientConnInterface) OrganizationalRolePermissionPolicyServiceClient {
	return &organizationalRolePermissionPolicyServiceClient{cc}
}

func (c *organizationalRolePermissionPolicyServiceClient) List(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyListResponse, error) {
	out := new(grpc1.OrganizationalRolePermissionPolicyListResponse)
	err := c.cc.Invoke(ctx, OrganizationalRolePermissionPolicyService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRolePermissionPolicyServiceClient) Get(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyGetRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyGetResponse, error) {
	out := new(grpc1.OrganizationalRolePermissionPolicyGetResponse)
	err := c.cc.Invoke(ctx, OrganizationalRolePermissionPolicyService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRolePermissionPolicyServiceClient) Delete(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyDeleteResponse, error) {
	out := new(grpc1.OrganizationalRolePermissionPolicyDeleteResponse)
	err := c.cc.Invoke(ctx, OrganizationalRolePermissionPolicyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRolePermissionPolicyServiceClient) Create(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyCreateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyCreateResponse, error) {
	out := new(grpc1.OrganizationalRolePermissionPolicyCreateResponse)
	err := c.cc.Invoke(ctx, OrganizationalRolePermissionPolicyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationalRolePermissionPolicyServiceClient) Update(ctx context.Context, in *grpc1.OrganizationalRolePermissionPolicyUpdateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionPolicyUpdateResponse, error) {
	out := new(grpc1.OrganizationalRolePermissionPolicyUpdateResponse)
	err := c.cc.Invoke(ctx, OrganizationalRolePermissionPolicyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationalRolePermissionPolicyServiceServer is the server API for OrganizationalRolePermissionPolicyService service.
// All implementations must embed UnimplementedOrganizationalRolePermissionPolicyServiceServer
// for forward compatibility
type OrganizationalRolePermissionPolicyServiceServer interface {
	List(context.Context, *grpc1.OrganizationalRolePermissionPolicyListRequest) (*grpc1.OrganizationalRolePermissionPolicyListResponse, error)
	Get(context.Context, *grpc1.OrganizationalRolePermissionPolicyGetRequest) (*grpc1.OrganizationalRolePermissionPolicyGetResponse, error)
	Delete(context.Context, *grpc1.OrganizationalRolePermissionPolicyDeleteRequest) (*grpc1.OrganizationalRolePermissionPolicyDeleteResponse, error)
	Create(context.Context, *grpc1.OrganizationalRolePermissionPolicyCreateRequest) (*grpc1.OrganizationalRolePermissionPolicyCreateResponse, error)
	Update(context.Context, *grpc1.OrganizationalRolePermissionPolicyUpdateRequest) (*grpc1.OrganizationalRolePermissionPolicyUpdateResponse, error)
	mustEmbedUnimplementedOrganizationalRolePermissionPolicyServiceServer()
}

// UnimplementedOrganizationalRolePermissionPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationalRolePermissionPolicyServiceServer struct {
}

func (UnimplementedOrganizationalRolePermissionPolicyServiceServer) List(context.Context, *grpc1.OrganizationalRolePermissionPolicyListRequest) (*grpc1.OrganizationalRolePermissionPolicyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrganizationalRolePermissionPolicyServiceServer) Get(context.Context, *grpc1.OrganizationalRolePermissionPolicyGetRequest) (*grpc1.OrganizationalRolePermissionPolicyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrganizationalRolePermissionPolicyServiceServer) Delete(context.Context, *grpc1.OrganizationalRolePermissionPolicyDeleteRequest) (*grpc1.OrganizationalRolePermissionPolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationalRolePermissionPolicyServiceServer) Create(context.Context, *grpc1.OrganizationalRolePermissionPolicyCreateRequest) (*grpc1.OrganizationalRolePermissionPolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationalRolePermissionPolicyServiceServer) Update(context.Context, *grpc1.OrganizationalRolePermissionPolicyUpdateRequest) (*grpc1.OrganizationalRolePermissionPolicyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationalRolePermissionPolicyServiceServer) mustEmbedUnimplementedOrganizationalRolePermissionPolicyServiceServer() {
}

// UnsafeOrganizationalRolePermissionPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationalRolePermissionPolicyServiceServer will
// result in compilation errors.
type UnsafeOrganizationalRolePermissionPolicyServiceServer interface {
	mustEmbedUnimplementedOrganizationalRolePermissionPolicyServiceServer()
}

func RegisterOrganizationalRolePermissionPolicyServiceServer(s grpc.ServiceRegistrar, srv OrganizationalRolePermissionPolicyServiceServer) {
	s.RegisterService(&OrganizationalRolePermissionPolicyService_ServiceDesc, srv)
}

func _OrganizationalRolePermissionPolicyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRolePermissionPolicyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRolePermissionPolicyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).List(ctx, req.(*grpc1.OrganizationalRolePermissionPolicyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRolePermissionPolicyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRolePermissionPolicyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRolePermissionPolicyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Get(ctx, req.(*grpc1.OrganizationalRolePermissionPolicyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRolePermissionPolicyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRolePermissionPolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRolePermissionPolicyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Delete(ctx, req.(*grpc1.OrganizationalRolePermissionPolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRolePermissionPolicyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRolePermissionPolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRolePermissionPolicyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Create(ctx, req.(*grpc1.OrganizationalRolePermissionPolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationalRolePermissionPolicyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRolePermissionPolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRolePermissionPolicyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRolePermissionPolicyServiceServer).Update(ctx, req.(*grpc1.OrganizationalRolePermissionPolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationalRolePermissionPolicyService_ServiceDesc is the grpc.ServiceDesc for OrganizationalRolePermissionPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationalRolePermissionPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.OrganizationalRolePermissionPolicyService",
	HandlerType: (*OrganizationalRolePermissionPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _OrganizationalRolePermissionPolicyService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OrganizationalRolePermissionPolicyService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrganizationalRolePermissionPolicyService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OrganizationalRolePermissionPolicyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrganizationalRolePermissionPolicyService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/organizational_role_permission_policy_service.proto",
}
