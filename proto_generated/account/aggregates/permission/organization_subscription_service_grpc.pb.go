// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/organization_subscription_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationSubscriptionService_List_FullMethodName   = "/account.aggregates.permission.OrganizationSubscriptionService/List"
	OrganizationSubscriptionService_Get_FullMethodName    = "/account.aggregates.permission.OrganizationSubscriptionService/Get"
	OrganizationSubscriptionService_Delete_FullMethodName = "/account.aggregates.permission.OrganizationSubscriptionService/Delete"
	OrganizationSubscriptionService_Create_FullMethodName = "/account.aggregates.permission.OrganizationSubscriptionService/Create"
	OrganizationSubscriptionService_Update_FullMethodName = "/account.aggregates.permission.OrganizationSubscriptionService/Update"
)

// OrganizationSubscriptionServiceClient is the client API for OrganizationSubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationSubscriptionServiceClient interface {
	List(ctx context.Context, in *grpc1.OrganizationSubscriptionListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionListResponse, error)
	Get(ctx context.Context, in *grpc1.OrganizationSubscriptionGetRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionGetResponse, error)
	Delete(ctx context.Context, in *grpc1.OrganizationSubscriptionDeleteRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionDeleteResponse, error)
	Create(ctx context.Context, in *grpc1.OrganizationSubscriptionCreateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionCreateResponse, error)
	Update(ctx context.Context, in *grpc1.OrganizationSubscriptionUpdateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionUpdateResponse, error)
}

type organizationSubscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationSubscriptionServiceClient(cc grpc.ClientConnInterface) OrganizationSubscriptionServiceClient {
	return &organizationSubscriptionServiceClient{cc}
}

func (c *organizationSubscriptionServiceClient) List(ctx context.Context, in *grpc1.OrganizationSubscriptionListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionListResponse, error) {
	out := new(grpc1.OrganizationSubscriptionListResponse)
	err := c.cc.Invoke(ctx, OrganizationSubscriptionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationSubscriptionServiceClient) Get(ctx context.Context, in *grpc1.OrganizationSubscriptionGetRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionGetResponse, error) {
	out := new(grpc1.OrganizationSubscriptionGetResponse)
	err := c.cc.Invoke(ctx, OrganizationSubscriptionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationSubscriptionServiceClient) Delete(ctx context.Context, in *grpc1.OrganizationSubscriptionDeleteRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionDeleteResponse, error) {
	out := new(grpc1.OrganizationSubscriptionDeleteResponse)
	err := c.cc.Invoke(ctx, OrganizationSubscriptionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationSubscriptionServiceClient) Create(ctx context.Context, in *grpc1.OrganizationSubscriptionCreateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionCreateResponse, error) {
	out := new(grpc1.OrganizationSubscriptionCreateResponse)
	err := c.cc.Invoke(ctx, OrganizationSubscriptionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationSubscriptionServiceClient) Update(ctx context.Context, in *grpc1.OrganizationSubscriptionUpdateRequest, opts ...grpc.CallOption) (*grpc1.OrganizationSubscriptionUpdateResponse, error) {
	out := new(grpc1.OrganizationSubscriptionUpdateResponse)
	err := c.cc.Invoke(ctx, OrganizationSubscriptionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationSubscriptionServiceServer is the server API for OrganizationSubscriptionService service.
// All implementations must embed UnimplementedOrganizationSubscriptionServiceServer
// for forward compatibility
type OrganizationSubscriptionServiceServer interface {
	List(context.Context, *grpc1.OrganizationSubscriptionListRequest) (*grpc1.OrganizationSubscriptionListResponse, error)
	Get(context.Context, *grpc1.OrganizationSubscriptionGetRequest) (*grpc1.OrganizationSubscriptionGetResponse, error)
	Delete(context.Context, *grpc1.OrganizationSubscriptionDeleteRequest) (*grpc1.OrganizationSubscriptionDeleteResponse, error)
	Create(context.Context, *grpc1.OrganizationSubscriptionCreateRequest) (*grpc1.OrganizationSubscriptionCreateResponse, error)
	Update(context.Context, *grpc1.OrganizationSubscriptionUpdateRequest) (*grpc1.OrganizationSubscriptionUpdateResponse, error)
	mustEmbedUnimplementedOrganizationSubscriptionServiceServer()
}

// UnimplementedOrganizationSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationSubscriptionServiceServer struct {
}

func (UnimplementedOrganizationSubscriptionServiceServer) List(context.Context, *grpc1.OrganizationSubscriptionListRequest) (*grpc1.OrganizationSubscriptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrganizationSubscriptionServiceServer) Get(context.Context, *grpc1.OrganizationSubscriptionGetRequest) (*grpc1.OrganizationSubscriptionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOrganizationSubscriptionServiceServer) Delete(context.Context, *grpc1.OrganizationSubscriptionDeleteRequest) (*grpc1.OrganizationSubscriptionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedOrganizationSubscriptionServiceServer) Create(context.Context, *grpc1.OrganizationSubscriptionCreateRequest) (*grpc1.OrganizationSubscriptionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedOrganizationSubscriptionServiceServer) Update(context.Context, *grpc1.OrganizationSubscriptionUpdateRequest) (*grpc1.OrganizationSubscriptionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedOrganizationSubscriptionServiceServer) mustEmbedUnimplementedOrganizationSubscriptionServiceServer() {
}

// UnsafeOrganizationSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationSubscriptionServiceServer will
// result in compilation errors.
type UnsafeOrganizationSubscriptionServiceServer interface {
	mustEmbedUnimplementedOrganizationSubscriptionServiceServer()
}

func RegisterOrganizationSubscriptionServiceServer(s grpc.ServiceRegistrar, srv OrganizationSubscriptionServiceServer) {
	s.RegisterService(&OrganizationSubscriptionService_ServiceDesc, srv)
}

func _OrganizationSubscriptionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationSubscriptionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationSubscriptionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationSubscriptionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationSubscriptionServiceServer).List(ctx, req.(*grpc1.OrganizationSubscriptionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationSubscriptionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationSubscriptionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationSubscriptionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationSubscriptionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationSubscriptionServiceServer).Get(ctx, req.(*grpc1.OrganizationSubscriptionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationSubscriptionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationSubscriptionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationSubscriptionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationSubscriptionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationSubscriptionServiceServer).Delete(ctx, req.(*grpc1.OrganizationSubscriptionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationSubscriptionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationSubscriptionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationSubscriptionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationSubscriptionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationSubscriptionServiceServer).Create(ctx, req.(*grpc1.OrganizationSubscriptionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationSubscriptionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationSubscriptionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationSubscriptionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationSubscriptionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationSubscriptionServiceServer).Update(ctx, req.(*grpc1.OrganizationSubscriptionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationSubscriptionService_ServiceDesc is the grpc.ServiceDesc for OrganizationSubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationSubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.OrganizationSubscriptionService",
	HandlerType: (*OrganizationSubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _OrganizationSubscriptionService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OrganizationSubscriptionService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _OrganizationSubscriptionService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _OrganizationSubscriptionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _OrganizationSubscriptionService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/organization_subscription_service.proto",
}
