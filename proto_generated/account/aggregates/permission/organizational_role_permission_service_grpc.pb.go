// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/organizational_role_permission_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OrganizationalRolePermissionService_List_FullMethodName = "/account.aggregates.permission.OrganizationalRolePermissionService/List"
)

// OrganizationalRolePermissionServiceClient is the client API for OrganizationalRolePermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrganizationalRolePermissionServiceClient interface {
	List(ctx context.Context, in *grpc1.OrganizationalRolePermissionListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionListResponse, error)
}

type organizationalRolePermissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrganizationalRolePermissionServiceClient(cc grpc.ClientConnInterface) OrganizationalRolePermissionServiceClient {
	return &organizationalRolePermissionServiceClient{cc}
}

func (c *organizationalRolePermissionServiceClient) List(ctx context.Context, in *grpc1.OrganizationalRolePermissionListRequest, opts ...grpc.CallOption) (*grpc1.OrganizationalRolePermissionListResponse, error) {
	out := new(grpc1.OrganizationalRolePermissionListResponse)
	err := c.cc.Invoke(ctx, OrganizationalRolePermissionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationalRolePermissionServiceServer is the server API for OrganizationalRolePermissionService service.
// All implementations must embed UnimplementedOrganizationalRolePermissionServiceServer
// for forward compatibility
type OrganizationalRolePermissionServiceServer interface {
	List(context.Context, *grpc1.OrganizationalRolePermissionListRequest) (*grpc1.OrganizationalRolePermissionListResponse, error)
	mustEmbedUnimplementedOrganizationalRolePermissionServiceServer()
}

// UnimplementedOrganizationalRolePermissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrganizationalRolePermissionServiceServer struct {
}

func (UnimplementedOrganizationalRolePermissionServiceServer) List(context.Context, *grpc1.OrganizationalRolePermissionListRequest) (*grpc1.OrganizationalRolePermissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOrganizationalRolePermissionServiceServer) mustEmbedUnimplementedOrganizationalRolePermissionServiceServer() {
}

// UnsafeOrganizationalRolePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrganizationalRolePermissionServiceServer will
// result in compilation errors.
type UnsafeOrganizationalRolePermissionServiceServer interface {
	mustEmbedUnimplementedOrganizationalRolePermissionServiceServer()
}

func RegisterOrganizationalRolePermissionServiceServer(s grpc.ServiceRegistrar, srv OrganizationalRolePermissionServiceServer) {
	s.RegisterService(&OrganizationalRolePermissionService_ServiceDesc, srv)
}

func _OrganizationalRolePermissionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.OrganizationalRolePermissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationalRolePermissionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrganizationalRolePermissionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationalRolePermissionServiceServer).List(ctx, req.(*grpc1.OrganizationalRolePermissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrganizationalRolePermissionService_ServiceDesc is the grpc.ServiceDesc for OrganizationalRolePermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrganizationalRolePermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.OrganizationalRolePermissionService",
	HandlerType: (*OrganizationalRolePermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _OrganizationalRolePermissionService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/organizational_role_permission_service.proto",
}
