// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/subscription_permission_policy_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubscriptionPermissionPolicyService_List_FullMethodName   = "/account.aggregates.permission.SubscriptionPermissionPolicyService/List"
	SubscriptionPermissionPolicyService_Get_FullMethodName    = "/account.aggregates.permission.SubscriptionPermissionPolicyService/Get"
	SubscriptionPermissionPolicyService_Delete_FullMethodName = "/account.aggregates.permission.SubscriptionPermissionPolicyService/Delete"
	SubscriptionPermissionPolicyService_Create_FullMethodName = "/account.aggregates.permission.SubscriptionPermissionPolicyService/Create"
	SubscriptionPermissionPolicyService_Update_FullMethodName = "/account.aggregates.permission.SubscriptionPermissionPolicyService/Update"
)

// SubscriptionPermissionPolicyServiceClient is the client API for SubscriptionPermissionPolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionPermissionPolicyServiceClient interface {
	List(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyListRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyListResponse, error)
	Get(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyGetRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyGetResponse, error)
	Delete(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyDeleteResponse, error)
	Create(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyCreateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyCreateResponse, error)
	Update(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyUpdateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyUpdateResponse, error)
}

type subscriptionPermissionPolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionPermissionPolicyServiceClient(cc grpc.ClientConnInterface) SubscriptionPermissionPolicyServiceClient {
	return &subscriptionPermissionPolicyServiceClient{cc}
}

func (c *subscriptionPermissionPolicyServiceClient) List(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyListRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyListResponse, error) {
	out := new(grpc1.SubscriptionPermissionPolicyListResponse)
	err := c.cc.Invoke(ctx, SubscriptionPermissionPolicyService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPermissionPolicyServiceClient) Get(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyGetRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyGetResponse, error) {
	out := new(grpc1.SubscriptionPermissionPolicyGetResponse)
	err := c.cc.Invoke(ctx, SubscriptionPermissionPolicyService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPermissionPolicyServiceClient) Delete(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyDeleteRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyDeleteResponse, error) {
	out := new(grpc1.SubscriptionPermissionPolicyDeleteResponse)
	err := c.cc.Invoke(ctx, SubscriptionPermissionPolicyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPermissionPolicyServiceClient) Create(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyCreateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyCreateResponse, error) {
	out := new(grpc1.SubscriptionPermissionPolicyCreateResponse)
	err := c.cc.Invoke(ctx, SubscriptionPermissionPolicyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionPermissionPolicyServiceClient) Update(ctx context.Context, in *grpc1.SubscriptionPermissionPolicyUpdateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionPermissionPolicyUpdateResponse, error) {
	out := new(grpc1.SubscriptionPermissionPolicyUpdateResponse)
	err := c.cc.Invoke(ctx, SubscriptionPermissionPolicyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionPermissionPolicyServiceServer is the server API for SubscriptionPermissionPolicyService service.
// All implementations must embed UnimplementedSubscriptionPermissionPolicyServiceServer
// for forward compatibility
type SubscriptionPermissionPolicyServiceServer interface {
	List(context.Context, *grpc1.SubscriptionPermissionPolicyListRequest) (*grpc1.SubscriptionPermissionPolicyListResponse, error)
	Get(context.Context, *grpc1.SubscriptionPermissionPolicyGetRequest) (*grpc1.SubscriptionPermissionPolicyGetResponse, error)
	Delete(context.Context, *grpc1.SubscriptionPermissionPolicyDeleteRequest) (*grpc1.SubscriptionPermissionPolicyDeleteResponse, error)
	Create(context.Context, *grpc1.SubscriptionPermissionPolicyCreateRequest) (*grpc1.SubscriptionPermissionPolicyCreateResponse, error)
	Update(context.Context, *grpc1.SubscriptionPermissionPolicyUpdateRequest) (*grpc1.SubscriptionPermissionPolicyUpdateResponse, error)
	mustEmbedUnimplementedSubscriptionPermissionPolicyServiceServer()
}

// UnimplementedSubscriptionPermissionPolicyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionPermissionPolicyServiceServer struct {
}

func (UnimplementedSubscriptionPermissionPolicyServiceServer) List(context.Context, *grpc1.SubscriptionPermissionPolicyListRequest) (*grpc1.SubscriptionPermissionPolicyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSubscriptionPermissionPolicyServiceServer) Get(context.Context, *grpc1.SubscriptionPermissionPolicyGetRequest) (*grpc1.SubscriptionPermissionPolicyGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSubscriptionPermissionPolicyServiceServer) Delete(context.Context, *grpc1.SubscriptionPermissionPolicyDeleteRequest) (*grpc1.SubscriptionPermissionPolicyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSubscriptionPermissionPolicyServiceServer) Create(context.Context, *grpc1.SubscriptionPermissionPolicyCreateRequest) (*grpc1.SubscriptionPermissionPolicyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubscriptionPermissionPolicyServiceServer) Update(context.Context, *grpc1.SubscriptionPermissionPolicyUpdateRequest) (*grpc1.SubscriptionPermissionPolicyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubscriptionPermissionPolicyServiceServer) mustEmbedUnimplementedSubscriptionPermissionPolicyServiceServer() {
}

// UnsafeSubscriptionPermissionPolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionPermissionPolicyServiceServer will
// result in compilation errors.
type UnsafeSubscriptionPermissionPolicyServiceServer interface {
	mustEmbedUnimplementedSubscriptionPermissionPolicyServiceServer()
}

func RegisterSubscriptionPermissionPolicyServiceServer(s grpc.ServiceRegistrar, srv SubscriptionPermissionPolicyServiceServer) {
	s.RegisterService(&SubscriptionPermissionPolicyService_ServiceDesc, srv)
}

func _SubscriptionPermissionPolicyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionPermissionPolicyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPermissionPolicyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPermissionPolicyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPermissionPolicyServiceServer).List(ctx, req.(*grpc1.SubscriptionPermissionPolicyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPermissionPolicyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionPermissionPolicyGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPermissionPolicyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPermissionPolicyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPermissionPolicyServiceServer).Get(ctx, req.(*grpc1.SubscriptionPermissionPolicyGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPermissionPolicyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionPermissionPolicyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPermissionPolicyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPermissionPolicyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPermissionPolicyServiceServer).Delete(ctx, req.(*grpc1.SubscriptionPermissionPolicyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPermissionPolicyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionPermissionPolicyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPermissionPolicyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPermissionPolicyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPermissionPolicyServiceServer).Create(ctx, req.(*grpc1.SubscriptionPermissionPolicyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionPermissionPolicyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionPermissionPolicyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionPermissionPolicyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionPermissionPolicyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionPermissionPolicyServiceServer).Update(ctx, req.(*grpc1.SubscriptionPermissionPolicyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionPermissionPolicyService_ServiceDesc is the grpc.ServiceDesc for SubscriptionPermissionPolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionPermissionPolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.SubscriptionPermissionPolicyService",
	HandlerType: (*SubscriptionPermissionPolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SubscriptionPermissionPolicyService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SubscriptionPermissionPolicyService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubscriptionPermissionPolicyService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SubscriptionPermissionPolicyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubscriptionPermissionPolicyService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/subscription_permission_policy_service.proto",
}
