// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/permission/subscription_service.proto

package protopermission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/permission/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubscriptionService_List_FullMethodName   = "/account.aggregates.permission.SubscriptionService/List"
	SubscriptionService_Get_FullMethodName    = "/account.aggregates.permission.SubscriptionService/Get"
	SubscriptionService_Delete_FullMethodName = "/account.aggregates.permission.SubscriptionService/Delete"
	SubscriptionService_Create_FullMethodName = "/account.aggregates.permission.SubscriptionService/Create"
	SubscriptionService_Update_FullMethodName = "/account.aggregates.permission.SubscriptionService/Update"
)

// SubscriptionServiceClient is the client API for SubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionServiceClient interface {
	List(ctx context.Context, in *grpc1.SubscriptionListRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionListResponse, error)
	Get(ctx context.Context, in *grpc1.SubscriptionGetRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionGetResponse, error)
	Delete(ctx context.Context, in *grpc1.SubscriptionDeleteRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionDeleteResponse, error)
	Create(ctx context.Context, in *grpc1.SubscriptionCreateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionCreateResponse, error)
	Update(ctx context.Context, in *grpc1.SubscriptionUpdateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionUpdateResponse, error)
}

type subscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionServiceClient(cc grpc.ClientConnInterface) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) List(ctx context.Context, in *grpc1.SubscriptionListRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionListResponse, error) {
	out := new(grpc1.SubscriptionListResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Get(ctx context.Context, in *grpc1.SubscriptionGetRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionGetResponse, error) {
	out := new(grpc1.SubscriptionGetResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Delete(ctx context.Context, in *grpc1.SubscriptionDeleteRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionDeleteResponse, error) {
	out := new(grpc1.SubscriptionDeleteResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Create(ctx context.Context, in *grpc1.SubscriptionCreateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionCreateResponse, error) {
	out := new(grpc1.SubscriptionCreateResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Update(ctx context.Context, in *grpc1.SubscriptionUpdateRequest, opts ...grpc.CallOption) (*grpc1.SubscriptionUpdateResponse, error) {
	out := new(grpc1.SubscriptionUpdateResponse)
	err := c.cc.Invoke(ctx, SubscriptionService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionServiceServer is the server API for SubscriptionService service.
// All implementations must embed UnimplementedSubscriptionServiceServer
// for forward compatibility
type SubscriptionServiceServer interface {
	List(context.Context, *grpc1.SubscriptionListRequest) (*grpc1.SubscriptionListResponse, error)
	Get(context.Context, *grpc1.SubscriptionGetRequest) (*grpc1.SubscriptionGetResponse, error)
	Delete(context.Context, *grpc1.SubscriptionDeleteRequest) (*grpc1.SubscriptionDeleteResponse, error)
	Create(context.Context, *grpc1.SubscriptionCreateRequest) (*grpc1.SubscriptionCreateResponse, error)
	Update(context.Context, *grpc1.SubscriptionUpdateRequest) (*grpc1.SubscriptionUpdateResponse, error)
	mustEmbedUnimplementedSubscriptionServiceServer()
}

// UnimplementedSubscriptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionServiceServer struct {
}

func (UnimplementedSubscriptionServiceServer) List(context.Context, *grpc1.SubscriptionListRequest) (*grpc1.SubscriptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSubscriptionServiceServer) Get(context.Context, *grpc1.SubscriptionGetRequest) (*grpc1.SubscriptionGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSubscriptionServiceServer) Delete(context.Context, *grpc1.SubscriptionDeleteRequest) (*grpc1.SubscriptionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSubscriptionServiceServer) Create(context.Context, *grpc1.SubscriptionCreateRequest) (*grpc1.SubscriptionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubscriptionServiceServer) Update(context.Context, *grpc1.SubscriptionUpdateRequest) (*grpc1.SubscriptionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubscriptionServiceServer) mustEmbedUnimplementedSubscriptionServiceServer() {}

// UnsafeSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionServiceServer will
// result in compilation errors.
type UnsafeSubscriptionServiceServer interface {
	mustEmbedUnimplementedSubscriptionServiceServer()
}

func RegisterSubscriptionServiceServer(s grpc.ServiceRegistrar, srv SubscriptionServiceServer) {
	s.RegisterService(&SubscriptionService_ServiceDesc, srv)
}

func _SubscriptionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).List(ctx, req.(*grpc1.SubscriptionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Get(ctx, req.(*grpc1.SubscriptionGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Delete(ctx, req.(*grpc1.SubscriptionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Create(ctx, req.(*grpc1.SubscriptionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.SubscriptionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).Update(ctx, req.(*grpc1.SubscriptionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionService_ServiceDesc is the grpc.ServiceDesc for SubscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.permission.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SubscriptionService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SubscriptionService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubscriptionService_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SubscriptionService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubscriptionService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/permission/subscription_service.proto",
}
