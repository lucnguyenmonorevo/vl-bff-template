// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/account/base_service.proto

package protoaccount

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/account/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BaseService_Create_FullMethodName = "/account.aggregates.account.BaseService/Create"
	BaseService_Update_FullMethodName = "/account.aggregates.account.BaseService/Update"
	BaseService_Delete_FullMethodName = "/account.aggregates.account.BaseService/Delete"
	BaseService_Get_FullMethodName    = "/account.aggregates.account.BaseService/Get"
	BaseService_List_FullMethodName   = "/account.aggregates.account.BaseService/List"
)

// BaseServiceClient is the client API for BaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BaseServiceClient interface {
	Create(ctx context.Context, in *grpc1.BaseCreateRequest, opts ...grpc.CallOption) (*grpc1.BaseCreateResponse, error)
	Update(ctx context.Context, in *grpc1.BaseUpdateRequest, opts ...grpc.CallOption) (*grpc1.BaseUpdateResponse, error)
	Delete(ctx context.Context, in *grpc1.BaseDeleteRequest, opts ...grpc.CallOption) (*grpc1.BaseDeleteResponse, error)
	Get(ctx context.Context, in *grpc1.BaseGetRequest, opts ...grpc.CallOption) (*grpc1.BaseGetResponse, error)
	List(ctx context.Context, in *grpc1.BaseListRequest, opts ...grpc.CallOption) (*grpc1.BaseListResponse, error)
}

type baseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseServiceClient(cc grpc.ClientConnInterface) BaseServiceClient {
	return &baseServiceClient{cc}
}

func (c *baseServiceClient) Create(ctx context.Context, in *grpc1.BaseCreateRequest, opts ...grpc.CallOption) (*grpc1.BaseCreateResponse, error) {
	out := new(grpc1.BaseCreateResponse)
	err := c.cc.Invoke(ctx, BaseService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) Update(ctx context.Context, in *grpc1.BaseUpdateRequest, opts ...grpc.CallOption) (*grpc1.BaseUpdateResponse, error) {
	out := new(grpc1.BaseUpdateResponse)
	err := c.cc.Invoke(ctx, BaseService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) Delete(ctx context.Context, in *grpc1.BaseDeleteRequest, opts ...grpc.CallOption) (*grpc1.BaseDeleteResponse, error) {
	out := new(grpc1.BaseDeleteResponse)
	err := c.cc.Invoke(ctx, BaseService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) Get(ctx context.Context, in *grpc1.BaseGetRequest, opts ...grpc.CallOption) (*grpc1.BaseGetResponse, error) {
	out := new(grpc1.BaseGetResponse)
	err := c.cc.Invoke(ctx, BaseService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) List(ctx context.Context, in *grpc1.BaseListRequest, opts ...grpc.CallOption) (*grpc1.BaseListResponse, error) {
	out := new(grpc1.BaseListResponse)
	err := c.cc.Invoke(ctx, BaseService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServiceServer is the server API for BaseService service.
// All implementations must embed UnimplementedBaseServiceServer
// for forward compatibility
type BaseServiceServer interface {
	Create(context.Context, *grpc1.BaseCreateRequest) (*grpc1.BaseCreateResponse, error)
	Update(context.Context, *grpc1.BaseUpdateRequest) (*grpc1.BaseUpdateResponse, error)
	Delete(context.Context, *grpc1.BaseDeleteRequest) (*grpc1.BaseDeleteResponse, error)
	Get(context.Context, *grpc1.BaseGetRequest) (*grpc1.BaseGetResponse, error)
	List(context.Context, *grpc1.BaseListRequest) (*grpc1.BaseListResponse, error)
	mustEmbedUnimplementedBaseServiceServer()
}

// UnimplementedBaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBaseServiceServer struct {
}

func (UnimplementedBaseServiceServer) Create(context.Context, *grpc1.BaseCreateRequest) (*grpc1.BaseCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBaseServiceServer) Update(context.Context, *grpc1.BaseUpdateRequest) (*grpc1.BaseUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBaseServiceServer) Delete(context.Context, *grpc1.BaseDeleteRequest) (*grpc1.BaseDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBaseServiceServer) Get(context.Context, *grpc1.BaseGetRequest) (*grpc1.BaseGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBaseServiceServer) List(context.Context, *grpc1.BaseListRequest) (*grpc1.BaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedBaseServiceServer) mustEmbedUnimplementedBaseServiceServer() {}

// UnsafeBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServiceServer will
// result in compilation errors.
type UnsafeBaseServiceServer interface {
	mustEmbedUnimplementedBaseServiceServer()
}

func RegisterBaseServiceServer(s grpc.ServiceRegistrar, srv BaseServiceServer) {
	s.RegisterService(&BaseService_ServiceDesc, srv)
}

func _BaseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.BaseCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).Create(ctx, req.(*grpc1.BaseCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.BaseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).Update(ctx, req.(*grpc1.BaseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.BaseDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).Delete(ctx, req.(*grpc1.BaseDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.BaseGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).Get(ctx, req.(*grpc1.BaseGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.BaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).List(ctx, req.(*grpc1.BaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseService_ServiceDesc is the grpc.ServiceDesc for BaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.account.BaseService",
	HandlerType: (*BaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BaseService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BaseService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BaseService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BaseService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BaseService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/account/base_service.proto",
}
