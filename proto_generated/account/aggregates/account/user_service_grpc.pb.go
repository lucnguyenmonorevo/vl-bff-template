// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account/aggregates/account/user_service.proto

package protoaccount

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	grpc1 "vl-account/proto_generated/account/aggregates/account/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Register_FullMethodName      = "/account.aggregates.account.UserService/Register"
	UserService_Update_FullMethodName        = "/account.aggregates.account.UserService/Update"
	UserService_Resign_FullMethodName        = "/account.aggregates.account.UserService/Resign"
	UserService_GetLoggedInfo_FullMethodName = "/account.aggregates.account.UserService/GetLoggedInfo"
	UserService_Get_FullMethodName           = "/account.aggregates.account.UserService/Get"
	UserService_List_FullMethodName          = "/account.aggregates.account.UserService/List"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Register(ctx context.Context, in *grpc1.UserRegisterRequest, opts ...grpc.CallOption) (*grpc1.UserRegisterResponse, error)
	Update(ctx context.Context, in *grpc1.UserUpdateRequest, opts ...grpc.CallOption) (*grpc1.UserUpdateResponse, error)
	Resign(ctx context.Context, in *grpc1.UserResignRequest, opts ...grpc.CallOption) (*grpc1.UserResignResponse, error)
	GetLoggedInfo(ctx context.Context, in *grpc1.UserGetLoggedInfoRequest, opts ...grpc.CallOption) (*grpc1.UserGetLoggedInfoResponse, error)
	Get(ctx context.Context, in *grpc1.UserGetRequest, opts ...grpc.CallOption) (*grpc1.UserGetResponse, error)
	List(ctx context.Context, in *grpc1.UserListRequest, opts ...grpc.CallOption) (*grpc1.UserListResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *grpc1.UserRegisterRequest, opts ...grpc.CallOption) (*grpc1.UserRegisterResponse, error) {
	out := new(grpc1.UserRegisterResponse)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *grpc1.UserUpdateRequest, opts ...grpc.CallOption) (*grpc1.UserUpdateResponse, error) {
	out := new(grpc1.UserUpdateResponse)
	err := c.cc.Invoke(ctx, UserService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Resign(ctx context.Context, in *grpc1.UserResignRequest, opts ...grpc.CallOption) (*grpc1.UserResignResponse, error) {
	out := new(grpc1.UserResignResponse)
	err := c.cc.Invoke(ctx, UserService_Resign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetLoggedInfo(ctx context.Context, in *grpc1.UserGetLoggedInfoRequest, opts ...grpc.CallOption) (*grpc1.UserGetLoggedInfoResponse, error) {
	out := new(grpc1.UserGetLoggedInfoResponse)
	err := c.cc.Invoke(ctx, UserService_GetLoggedInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *grpc1.UserGetRequest, opts ...grpc.CallOption) (*grpc1.UserGetResponse, error) {
	out := new(grpc1.UserGetResponse)
	err := c.cc.Invoke(ctx, UserService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) List(ctx context.Context, in *grpc1.UserListRequest, opts ...grpc.CallOption) (*grpc1.UserListResponse, error) {
	out := new(grpc1.UserListResponse)
	err := c.cc.Invoke(ctx, UserService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Register(context.Context, *grpc1.UserRegisterRequest) (*grpc1.UserRegisterResponse, error)
	Update(context.Context, *grpc1.UserUpdateRequest) (*grpc1.UserUpdateResponse, error)
	Resign(context.Context, *grpc1.UserResignRequest) (*grpc1.UserResignResponse, error)
	GetLoggedInfo(context.Context, *grpc1.UserGetLoggedInfoRequest) (*grpc1.UserGetLoggedInfoResponse, error)
	Get(context.Context, *grpc1.UserGetRequest) (*grpc1.UserGetResponse, error)
	List(context.Context, *grpc1.UserListRequest) (*grpc1.UserListResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Register(context.Context, *grpc1.UserRegisterRequest) (*grpc1.UserRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Update(context.Context, *grpc1.UserUpdateRequest) (*grpc1.UserUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserServiceServer) Resign(context.Context, *grpc1.UserResignRequest) (*grpc1.UserResignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resign not implemented")
}
func (UnimplementedUserServiceServer) GetLoggedInfo(context.Context, *grpc1.UserGetLoggedInfoRequest) (*grpc1.UserGetLoggedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoggedInfo not implemented")
}
func (UnimplementedUserServiceServer) Get(context.Context, *grpc1.UserGetRequest) (*grpc1.UserGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedUserServiceServer) List(context.Context, *grpc1.UserListRequest) (*grpc1.UserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*grpc1.UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*grpc1.UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Resign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.UserResignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Resign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Resign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Resign(ctx, req.(*grpc1.UserResignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetLoggedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.UserGetLoggedInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetLoggedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetLoggedInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetLoggedInfo(ctx, req.(*grpc1.UserGetLoggedInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.UserGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*grpc1.UserGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc1.UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).List(ctx, req.(*grpc1.UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.aggregates.account.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Resign",
			Handler:    _UserService_Resign_Handler,
		},
		{
			MethodName: "GetLoggedInfo",
			Handler:    _UserService_GetLoggedInfo_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account/aggregates/account/user_service.proto",
}
